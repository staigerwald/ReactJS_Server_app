version: '3.6'

services:
  # Контейнер с Node.js
  app:
    container_name: app_ReactJS
    build:
      context: ./ReactJS_app
      target: dev
    tty: true
    working_dir: /opt/app
    volumes:
      - ./ReactJS_app/public:/opt/app/public
      - ./ReactJS_app/src:/opt/app/src
      - volume_node_modules:/opt/app/node_modules
    env_file:
      - .env
    ports:
      - '3000:3000'

  centrifugo:
    container_name: centrifugo
    image: centrifugo/centrifugo:v3
    tty: true
    environment:
      CENTRIFUGO_HEALTH: "true"
    ports:
      - "8086:8086"
    volumes:
      - ./centrifugo/config.json:/centrifugo/config.json
    healthcheck:
      test: [ "CMD", "sh", "-c", "wget -nv -O - http://localhost:8086/health" ]
      interval: 3s
      timeout: 3s
      retries: 3
    depends_on:
      - app
    command: centrifugo -c config.json --port 8086

  keycloak:
    container_name: keycloak
    environment:
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      DB_ADDR: ${POSTGRESQL_HOST}
      DB_DATABASE: ${POSTGRESQL_DB}
      DB_USER: ${POSTGRESQL_USER}
      DB_PASSWORD: ${POSTGRESQL_PASS}
    ports:
      - '8080:8080'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/"]
      interval: 5s
      timeout: 2s
      retries: 15
    image: jboss/keycloak:${KEYCLOAK_VERSION}
    depends_on:
      - postgres
    restart: unless-stopped
    command: [ "-b", "0.0.0.0", "-Dkeycloak.profile.feature.docker=enabled" ]

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    volumes:
      - /postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRESQL_DB}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Контейнер с nginx
  nginx:
    container_name: proxy_nginx
    image: nginx:${NGINX_VERSION}
    ports:
      - '80:80'
    volumes:
      - ./nginx/conf.d/nginx_dev.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped
    depends_on:
      - app
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    # Перезапустит nginx контейнер каждые 6 часов и подгрузит новые сертификаты, если есть
volumes:
  volume_node_modules:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /ReactJS_app/node_modules